package edu.monash.fit2024.simulator.matter;

import edu.monash.fit2024.simulator.userInterface.MessageRenderer;

/**
 * Base class for simulator commands.
 * 
 * This class needs, at minimum, an Actor, a World, and a MessageRenderer.  Given the Actor
 * performing the command, the World can determine its Location and any other Entities that exist
 * there.  The MessageRenderer allows for the output of any pertinent results.
 * 
 * Generated by UML Lab
 * 
 * @author ram
 * @date 17 February 2013
 */

/*
 * Changelog
 * 2013-02-28: added a MessageRenderer so that Actions can communicate to users. (ram)
 * 	Made an abstract class, since messageRenderer won't be public static final. (ram)
 * 	Added getDuration method, since it seems that duration is a property of the action. (ram)
 * 2013-03-01: Made generic to avoid downcasts in client code (ram)
 * 2013-03-04: Took the genericity out again, it's spreading like kudzu (ram)
 * 2013-03-09: Added accessor for String description (ram)
 * 	Made the default constructor private to ensure that the message renderer is set (ram)
 * 2013-03-12: Added wildcard template to Actor parameter in execute() to pacify the IDE (ram)
 * 	Documented all the methods to pacify my own sense of the tidy (ram)
 * 2013-04-08: Added ActionInterface so that client code can have Affordances that implement it (ram)
 */


public abstract class Action implements ActionInterface {
	protected MessageRenderer messageRenderer;
	
	/* (non-Javadoc)
	 * @see edu.monash.fit2024.simulator.ActionInterface#getDuration()
	 */
	@Override
	public abstract int getDuration();
	
	/* (non-Javadoc)
	 * @see edu.monash.fit2024.simulator.ActionInterface#execute(edu.monash.fit2024.simulator.Actor)
	 */
	@Override
	public abstract void execute(Actor<?> actor);

	/* (non-Javadoc)
	 * @see edu.monash.fit2024.simulator.ActionInterface#getDescription()
	 */
	@Override
	public abstract String getDescription();
	
	/**
	 * <p>The default constructor is private to prevent instantiation of an Action without a MessageRenderer.</p>
	 * 
	 */
	@SuppressWarnings("unused")
	private Action() {};
	
	/**
	 * <p>Call this from client code using a super() call.</p>
	 * 
	 * @param m MessageRenderer used for displaying messages
	 */
	public Action(MessageRenderer m) {
		messageRenderer = m;
	}
}